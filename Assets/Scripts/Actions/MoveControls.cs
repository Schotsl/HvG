//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Actions/MoveControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MoveControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MoveControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MoveControls"",
    ""maps"": [
        {
            ""name"": ""Mouse"",
            ""id"": ""4a54d05a-e3b3-42e5-985b-f5a959cf186c"",
            ""actions"": [
                {
                    ""name"": ""LeftClickDown"",
                    ""type"": ""Button"",
                    ""id"": ""f3375684-73ce-4dac-b12a-df6394d5e595"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""bea20a24-26f8-4e8c-af48-49e7ae749299"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e7c37e9c-89ae-4946-ad7b-6b1bfa15a9ad"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f3ef85d0-d468-4dcb-8d8a-075366190bd3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClickDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b2e0d09-1886-4b01-aa77-e79fb4d9ec54"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClickDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52cb85bc-38d2-4e54-8487-6b8af04ec735"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bce98b30-b806-4c64-b8ba-9bf183bfa525"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db84b614-cd12-439e-b0d5-8f000e73c4ec"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""id"": ""ad81dd61-5d17-4fe4-92da-c923a2f70fba"",
            ""actions"": [
                {
                    ""name"": ""PrimaryFingerPos"",
                    ""type"": ""Value"",
                    ""id"": ""e9fc9186-dd34-42bf-bcca-b32a1877a6a0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryFingerPos"",
                    ""type"": ""Value"",
                    ""id"": ""e1634c93-eb1b-45f9-9804-f96d1c13a0d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""0a8fb84a-8ac7-4ec6-b3c3-2cbf6c2f998b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""09357234-8529-4460-a2e0-785ffbe14151"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryFingerPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9510838c-4fce-412e-a181-4c67455c65af"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryFingerPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e4506ee-26d7-44dc-a045-627a59c7b7c1"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_LeftClickDown = m_Mouse.FindAction("LeftClickDown", throwIfNotFound: true);
        m_Mouse_MousePos = m_Mouse.FindAction("MousePos", throwIfNotFound: true);
        m_Mouse_MouseWheel = m_Mouse.FindAction("MouseWheel", throwIfNotFound: true);
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_PrimaryFingerPos = m_Touch.FindAction("PrimaryFingerPos", throwIfNotFound: true);
        m_Touch_SecondaryFingerPos = m_Touch.FindAction("SecondaryFingerPos", throwIfNotFound: true);
        m_Touch_SecondaryTouchContact = m_Touch.FindAction("SecondaryTouchContact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mouse
    private readonly InputActionMap m_Mouse;
    private IMouseActions m_MouseActionsCallbackInterface;
    private readonly InputAction m_Mouse_LeftClickDown;
    private readonly InputAction m_Mouse_MousePos;
    private readonly InputAction m_Mouse_MouseWheel;
    public struct MouseActions
    {
        private @MoveControls m_Wrapper;
        public MouseActions(@MoveControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClickDown => m_Wrapper.m_Mouse_LeftClickDown;
        public InputAction @MousePos => m_Wrapper.m_Mouse_MousePos;
        public InputAction @MouseWheel => m_Wrapper.m_Mouse_MouseWheel;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterface != null)
            {
                @LeftClickDown.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnLeftClickDown;
                @LeftClickDown.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnLeftClickDown;
                @LeftClickDown.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnLeftClickDown;
                @MousePos.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePos;
                @MousePos.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePos;
                @MousePos.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePos;
                @MouseWheel.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseWheel;
                @MouseWheel.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseWheel;
                @MouseWheel.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseWheel;
            }
            m_Wrapper.m_MouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftClickDown.started += instance.OnLeftClickDown;
                @LeftClickDown.performed += instance.OnLeftClickDown;
                @LeftClickDown.canceled += instance.OnLeftClickDown;
                @MousePos.started += instance.OnMousePos;
                @MousePos.performed += instance.OnMousePos;
                @MousePos.canceled += instance.OnMousePos;
                @MouseWheel.started += instance.OnMouseWheel;
                @MouseWheel.performed += instance.OnMouseWheel;
                @MouseWheel.canceled += instance.OnMouseWheel;
            }
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // Touch
    private readonly InputActionMap m_Touch;
    private ITouchActions m_TouchActionsCallbackInterface;
    private readonly InputAction m_Touch_PrimaryFingerPos;
    private readonly InputAction m_Touch_SecondaryFingerPos;
    private readonly InputAction m_Touch_SecondaryTouchContact;
    public struct TouchActions
    {
        private @MoveControls m_Wrapper;
        public TouchActions(@MoveControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryFingerPos => m_Wrapper.m_Touch_PrimaryFingerPos;
        public InputAction @SecondaryFingerPos => m_Wrapper.m_Touch_SecondaryFingerPos;
        public InputAction @SecondaryTouchContact => m_Wrapper.m_Touch_SecondaryTouchContact;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void SetCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterface != null)
            {
                @PrimaryFingerPos.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryFingerPos;
                @PrimaryFingerPos.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryFingerPos;
                @PrimaryFingerPos.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryFingerPos;
                @SecondaryFingerPos.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryFingerPos;
                @SecondaryFingerPos.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryFingerPos;
                @SecondaryFingerPos.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryFingerPos;
                @SecondaryTouchContact.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchContact;
                @SecondaryTouchContact.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchContact;
                @SecondaryTouchContact.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchContact;
            }
            m_Wrapper.m_TouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryFingerPos.started += instance.OnPrimaryFingerPos;
                @PrimaryFingerPos.performed += instance.OnPrimaryFingerPos;
                @PrimaryFingerPos.canceled += instance.OnPrimaryFingerPos;
                @SecondaryFingerPos.started += instance.OnSecondaryFingerPos;
                @SecondaryFingerPos.performed += instance.OnSecondaryFingerPos;
                @SecondaryFingerPos.canceled += instance.OnSecondaryFingerPos;
                @SecondaryTouchContact.started += instance.OnSecondaryTouchContact;
                @SecondaryTouchContact.performed += instance.OnSecondaryTouchContact;
                @SecondaryTouchContact.canceled += instance.OnSecondaryTouchContact;
            }
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface IMouseActions
    {
        void OnLeftClickDown(InputAction.CallbackContext context);
        void OnMousePos(InputAction.CallbackContext context);
        void OnMouseWheel(InputAction.CallbackContext context);
    }
    public interface ITouchActions
    {
        void OnPrimaryFingerPos(InputAction.CallbackContext context);
        void OnSecondaryFingerPos(InputAction.CallbackContext context);
        void OnSecondaryTouchContact(InputAction.CallbackContext context);
    }
}
